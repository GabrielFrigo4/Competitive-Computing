#+NAME: Code
#+BEGIN_SRC C :tangle tmp/main.c :mkdirp yes
#pragma region Include
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stddef.h>
#include <limits.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#pragma endregion Include

#pragma region Types
#define byte uint8_t
#define short int16_t
#define int int32_t
#define long int64_t
typedef int8_t sbyte;
typedef uint16_t ushort;
typedef uint32_t uint;
typedef uint64_t ulong;
#pragma endregion Types

#pragma region Constant
#undef LONG_MIN
#undef LONG_MAX
#undef ULONG_MAX
#define SBYTE_MIN SCHAR_MIN
#define SBYTE_MAX SCHAR_MAX
#define BYTE_MAX UCHAR_MAX
#define LONG_MIN LLONG_MIN
#define LONG_MAX LLONG_MAX
#define ULONG_MAX ULLONG_MAX
#define INF_MIN -0x3f3f3f3f3f3f3f3fLL
#define INF_MAX 0x3f3f3f3f3f3f3f3fLL
#define INF(type) ((1LL << (sizeof(type) * 8 - 2)) - 1)
#pragma endregion Constant

#pragma region Custom
#pragma endregion Custom

void test_run()
{
	return;
}

int main(void)
{
	test_run();
	return 0;
}
#+END_SRC

#+NAME: Input
#+BEGIN_SRC txt :tangle tmp/input.txt :mkdirp yes

#+END_SRC

#+NAME: Build
#+BEGIN_SRC elisp :async :var file-path=(buffer-file-name)
(org-babel-tangle-file file-path)
(setq results "[INFO]\n")
(setq results (concat results (format "file-path = \"%s\"\n" file-path)))
(setq results (concat results "\n[COMPILE]\n"))
(if (eq system-type 'windows-nt)
    (setq results (concat results (shell-command-to-string "gcc -Wl,--stack=268435456 -std=c23 -O2 \"tmp/main.c\" -o \"tmp/main\"")))
  (setq results (concat results (shell-command-to-string "gcc -Wl,-z,stack-size=268435456 -std=c23 -O2 \"tmp/main.c\" -o \"tmp/main\""))))
(setq results (concat results "\n[OUTPUT]\n"))
(setq results (concat results (shell-command-to-string "cat \"tmp/input.txt\" | \"tmp/main\"")))
(setq results (concat results "\n[CLEAN]\n"))
(setq results (concat results (shell-command-to-string "rm -r tmp")))
(setq results results)
#+END_SRC
